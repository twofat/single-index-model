#truebeta[trueset] = 1:truelength /truelength * 5
truebeta[trueset] = rep(3,truelength)
epsilon = rnorm(n,0,2)
y = X %*% as.matrix(truebeta) + epsilon
time = proc.time()
hatset2 = sort(combinetest(X, y, M,flag=300,print=F,inimethod="stepforward"))
print(proc.time()-time)
hatset2
sum(trueset %in% hatset2 / truelength)
n = 100
p = 200
truelength = 10
M = 20
X = generate(n,p,0.5)
trueset = sample(1:p,truelength)
print(sort(trueset))
truebeta = rep(0,p)
#truebeta[trueset] = 1:truelength /truelength * 5
truebeta[trueset] = rep(3,truelength)
epsilon = rnorm(n,0,2)
y = X %*% as.matrix(truebeta) + epsilon
time = proc.time()
betahat = subset_EM(X, y, M, flag=10000,print=T,style="classic",ini="stepforward")[[1]]
hatset1 = sort((1:p)[betahat!=0])
hatset1
sum(trueset %in% hatset1 / truelength)
print(proc.time()-time)
n = 50
p = 200
truelength = 10
M = 20
X = generate(n,p,0)
trueset = sample(1:p,truelength)
print(sort(trueset))
truebeta = rep(0,p)
#truebeta[trueset] = 1:truelength /truelength * 5
truebeta[trueset] = rep(3,truelength)
epsilon = rnorm(n,0,2)
y = X %*% as.matrix(truebeta) + epsilon
time = proc.time()
betahat = subset_EM(X, y, M, flag=10000,print=T,style="classic",ini="stepforward")[[1]]
hatset1 = sort((1:p)[betahat!=0])
hatset1
sum(trueset %in% hatset1 / truelength)
print(proc.time()-time)
time = proc.time()
betahat = subset_EM(X, y, M, flag=10000,print=T,style="classic",ini="stepforward")[[1]]
hatset1 = sort((1:p)[betahat!=0])
hatset1
sum(trueset %in% hatset1 / truelength)
print(proc.time()-time)
time = proc.time()
hatset2 = sort(combinetest(X, y, M,flag=300,print=F,inimethod="stepforward"))
print(proc.time()-time)
hatset2
sum(trueset %in% hatset2 / truelength)
time = proc.time()
hatset2 = sort(combinetest(X, y, M,flag=300,print=F,inimethod="zero"))
print(proc.time()-time)
hatset2
sum(trueset %in% hatset2 / truelength)
time = proc.time()
hatset2 = sort(combinetest(X, y, M,flag=1000,print=F,inimethod="zero"))
print(proc.time()-time)
hatset2
sum(trueset %in% hatset2 / truelength)
source("E://Variable Selective Methods//better subset//functions.r")
n = 50
p = 50
truelength = 10
M = 20
X = generate(n,p,0)
trueset = sample(1:p,truelength)
print(sort(trueset))
truebeta = rep(0,p)
#truebeta[trueset] = 1:truelength /truelength * 5
truebeta[trueset] = rep(3,truelength)
epsilon = rnorm(n,0,2)
y = X %*% as.matrix(truebeta) + epsilon
time = proc.time()
betahat = subset_EM(X, y, M, flag=10000,print=T,style="classic",ini="stepforward")[[1]]
hatset1 = sort((1:p)[betahat!=0])
hatset1
sum(trueset %in% hatset1 / truelength)
print(proc.time()-time)
time = proc.time()
betahat = subset_EMtest(X, y, M, flag=10000,print=T,style="classic",ini="stepforward")[[1]]
hatset3 = sort((1:p)[betahat!=0])
hatset3
sum(trueset %in% hatset3 / truelength)
print(proc.time()-time)
time = proc.time()
hatset2 = sort(combinetest(X, y, M,flag=200,print=F,inimethod="zero"))
print(proc.time()-time)
hatset2
sum(trueset %in% hatset2 / truelength)
source("E://Variable Selective Methods//better subset//functions.r")
time = proc.time()
hatset2 = sort(combinetest(X, y, M,flag=200,print=F,inimethod="zero"))
print(proc.time()-time)
time = proc.time()
hatset2 = sort(combinetest(X, y, M,flag=200,print=F,inimethod="zero"))
print(proc.time()-time)
hatset2
sum(trueset %in% hatset2 / truelength)
source("E://Variable Selective Methods//better subset//functions.r")
time = proc.time()
hatset2 = sort(combinetest(X, y, M,flag=200,print=F,inimethod="zero"))
print(proc.time()-time)
hatset2
sum(trueset %in% hatset2 / truelength)
source("E://Variable Selective Methods//better subset//functions.r")
time = proc.time()
hatset2 = sort(combinetest(X, y, M,flag=200,print=F,inimethod="zero"))
print(proc.time()-time)
hatset2
sum(trueset %in% hatset2 / truelength)
n = 50
p = 200
truelength = 10
M = 30
X = generate(n,p,0)
trueset = sample(1:p,truelength)
print(sort(trueset))
truebeta = rep(0,p)
#truebeta[trueset] = 1:truelength /truelength * 5
truebeta[trueset] = rep(3,truelength)
epsilon = rnorm(n,0,2)
y = X %*% as.matrix(truebeta) + epsilon
time = proc.time()
betahat = subset_EM(X, y, M, flag=10000,print=T,style="classic",ini="stepforward")[[1]]
hatset1 = sort((1:p)[betahat!=0])
hatset1
sum(trueset %in% hatset1 / truelength)
print(proc.time()-time)
n = 50
p = 200
truelength = 10
M = 20
X = generate(n,p,0)
trueset = sample(1:p,truelength)
print(sort(trueset))
truebeta = rep(0,p)
#truebeta[trueset] = 1:truelength /truelength * 5
truebeta[trueset] = rep(3,truelength)
epsilon = rnorm(n,0,2)
y = X %*% as.matrix(truebeta) + epsilon
time = proc.time()
betahat = subset_EM(X, y, M, flag=10000,print=T,style="classic",ini="stepforward")[[1]]
hatset1 = sort((1:p)[betahat!=0])
hatset1
sum(trueset %in% hatset1 / truelength)
print(proc.time()-time)
time = proc.time()
betahat = subset_EMtest(X, y, M, flag=10000,print=T,style="classic",ini="stepforward")[[1]]
hatset3 = sort((1:p)[betahat!=0])
hatset3
sum(trueset %in% hatset3 / truelength)
print(proc.time()-time)
time = proc.time()
hatset2 = sort(combinetest(X, y, M,flag=200,print=F,inimethod="zero"))
print(proc.time()-time)
hatset2
sum(trueset %in% hatset2 / truelength)
time = proc.time()
hatset2 = sort(combinetest(X, y, M,flag=200,print=F,inimethod="stepforward"))
print(proc.time()-time)
hatset2
sum(trueset %in% hatset2 / truelength)
epsilon
y
cv.glmnet(y=y,x=X,alpha=1,intercept=FALSE)
require(glmnet)
update(glmnet)
update("glmnet")
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
n = 100
t0 = 0.6
x1 = rnorm(n,0,1)
x2 = rexp(n)
x = cbind(x1, x2)
X = cbind(rep(1,n),x)
epsilon = rnorm(n, 0, 1)
beta1 = as.matrix(c (0,1/sqrt(2),1/sqrt(2)))
beta2 = as.matrix(c(0,1/sqrt(2),-1/sqrt(2)))
y1 = 20*exp(X[1:(t0*n),]%*%beta1) +epsilon[1:(t0*n)]
y2 = 20*exp(X[(t0*n+1):n,]%*%beta2) +epsilon[(t0*n+1):n]
y = c(y1, y2)
covhat = est_cov(x,y)
t = 0.9
est_beta(x[1:n*t,],y[1:n*t])
time = proc.time()
est_beta(x[1:n*t,],y[1:n*t])
proc.time() - time
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
est_beta(x[(t*n+1):n,],y[(t*n+1):n])
est_beta(x[1:n*t,],y[1:n*t])
time = proc.time()
est_beta(x[1:n*t,],y[1:n*t])
proc.time() - time
der_K(1)
der_K(rep(1,2))
est_beta(x[1:n*t,],y[1:n*t])
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
est_beta(x[1:n*t,],y[1:n*t])
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
est_beta(x[1:n*t,],y[1:n*t])
t = 0.5
est_beta(x[1:n*t,],y[1:n*t])
t = 0.9
time = proc.time()
est_beta(x[1:n*t,],y[1:n*t])
proc.time() - time
est_beta(x[(t*n+1):n,],y[(t*n+1):n])
Tn = est_Tn(x,y,covhat)
print(Tn)
temp = array(,c(2,2,2,2))
temp
100^4
precompute = function(X, y){
n = dim(X)[1]
array = array(,c(n,n,n,n))
for(k in 2:n){
print(k)
n = k^(-1/5)
for(i in 1:(n-1)){
for(j in (i+1):n){
array[k,i,j,] = der_K((X[i,]-X[j,])/h)*(y[i]-y[j])
array[k,j,i,] = array[k,i,j,]
}
}
}
array
}
array = precompute(X,y)
precompute = function(X, y){
n = dim(X)[1]
array = array(,c(n,n,n,n))
for(k in 2:n){
print(k)
h = k^(-1/5)
for(i in 1:(n-1)){
for(j in (i+1):n){
array[k,i,j,] = der_K((X[i,]-X[j,])/h)*(y[i]-y[j])
array[k,j,i,] = array[k,i,j,]
}
}
}
array
}
array = precompute(X,y)
i
j
n = dim(X)[1]
array = array(,c(n,n,n,n))
array
array[k,i,j,] = der_K((X[i,]-X[j,])/h)*(y[i]-y[j])
for(i in 1:(n-1)){
for(j in (i+1):n){
array[k,i,j,] = der_K((X[i,]-X[j,])/h)*(y[i]-y[j])
array[k,j,i,] = array[k,i,j,]
}
}
i
j
array[k,i,j,]
array[2,i,j,]
der_K((X[i,]-X[j,])/h)*(y[i]-y[j])
h = k^(-1/5)
h = 2^(-1/5)
der_K((X[i,]-X[j,])/h)*(y[i]-y[j])
X[i,]
X
x1 = rnorm(n,0,1)
x2 = rexp(n)
x = cbind(x1, x2)
epsilon = rnorm(n, 0, 1)
beta1 = as.matrix(c (1/sqrt(2),1/sqrt(2)))
beta2 = as.matrix(c(1/sqrt(2),-1/sqrt(2)))
y1 = 20*exp(X[1:(t0*n),]%*%beta1) +epsilon[1:(t0*n)]
y2 = 20*exp(X[(t0*n+1):n,]%*%beta2) +epsilon[(t0*n+1):n]
y = c(y1, y2)
x1 = rnorm(n,0,1)
x2 = rexp(n)
X = cbind(x1, x2)
epsilon = rnorm(n, 0, 1)
beta1 = as.matrix(c (1/sqrt(2),1/sqrt(2)))
beta2 = as.matrix(c(1/sqrt(2),-1/sqrt(2)))
y1 = 20*exp(X[1:(t0*n),]%*%beta1) +epsilon[1:(t0*n)]
y2 = 20*exp(X[(t0*n+1):n,]%*%beta2) +epsilon[(t0*n+1):n]
y = c(y1, y2)
array[k,i,j,] = der_K((X[i,]-X[j,])/h)*(y[i]-y[j])
der_K((X[i,]-X[j,])/h)*(y[i]-y[j])
array[2,i,j,] = der_K((X[i,]-X[j,])/h)*(y[i]-y[j])
array = array(,c(n,n,n,p))
p = dim(X)[2]
array = array(,c(n,n,n,p))
array[k,i,j,] = der_K((X[i,]-X[j,])/h)*(y[i]-y[j])
array[2,i,j,] = der_K((X[i,]-X[j,])/h)*(y[i]-y[j])
array[k,j,i,] = array[k,i,j,]
precompute = function(X, y){
n = dim(X)[1]
p = dim(X)[2]
array = array(,c(n,n,n,p))
for(k in 2:n){
print(k)
h = k^(-1/5)
for(i in 1:(n-1)){
for(j in (i+1):n){
array[k,i,j,] = der_K((X[i,]-X[j,])/h)*(y[i]-y[j])
array[k,j,i,] = array[k,i,j,]
}
}
}
array
}
array = precompute(X,y)
array
covhat = est_cov(x,y)
covhat = est_cov(X,y)
est_beta(X[1:n*t,],y[1:n*t])
array[100,4,5,]
array[100,4,5,]
array[100,4,5,]
array[100,4,5,]
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
est_beta(X[1:n*t,],y[1:n*t],array)
est_beta(X[1:n*t,],y[1:n*t],array)
time = proc.time()
est_beta(X[1:n*t,],y[1:n*t],array)
proc.time() - time
time = proc.time()
est_beta(X[1:n*t,],y[1:n*t],array)
proc.time() - time
est_beta(X[1:n*t,],y[1:n*t],array)
est_beta(X[(t*n+1):n,],y[(t*n+1):n])
est_beta(X[(t*n+1):n,],y[(t*n+1):n],array)
100^(-1/5)
90^(-1/5)
50^(-1/5)
10^(-1/5)
(10*(1:10))^(-1/5)
precompute = function(X, y){
n = dim(X)[1]
p = dim(X)[2]
array = array(,c(n/10,n,n,p))
for(k in seq(n/10,n,n/10)){
print(k)
h = k^(-1/5)
for(i in 1:(n-1)){
for(j in (i+1):n){
array[k,i,j,] = der_K((X[i,]-X[j,])/h)*(y[i]-y[j])
array[k,j,i,] = array[k,i,j,]
}
}
}
array
}
floor(67/10)
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
est_beta(X[1:n*t,],y[1:n*t],array)
array = precompute(X,y)
est_beta(X[1:n*t,],y[1:n*t],array)
dim(array)
array = precompute(X,y)
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
array = precompute(X,y)
Tn = est_Tn(x,y,covhat,array)
array = precompute(X,y)
source("E://Quality Control//wzf//code//function2.r")
source("E://Quality Control//wzf//code//functions.r")
est_beta(X[1:n*t,],y[1:n*t],array)
est_beta(X[(t*n+1):n,],y[(t*n+1):n],array)
Tn = est_Tn(x,y,covhat,array)
print(Tn)
est_beta(X[1:n*t,],y[1:n*t],array)
est_beta(X[(t*n+1):n,],y[(t*n+1):n],array)
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
est_beta(X[1:n*t,],y[1:n*t],array)
est_beta(X[(t*n+1):n,],y[(t*n+1):n],array)
t = 0.6
est_beta(X[1:n*t,],y[1:n*t],array)
est_beta(X[(t*n+1):n,],y[(t*n+1):n],array)
Tn = est_Tn(x,y,covhat,array)
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
est_beta(X[1:n*t,],y[1:n*t],array)
est_beta(X[(t*n+1):n,],y[(t*n+1):n],array)
t = 0.6
est_beta(X[1:n*t,],y[1:n*t],array)
est_beta(X[(t*n+1):n,],y[(t*n+1):n],array)
t = 0.9
est_beta(X[1:n*t,],y[1:n*t],array)
est_beta(X[(t*n+1):n,],y[(t*n+1):n],array)
est_beta(X[1:n*t,],y[1:n*t],array)
est_beta(X[(t*n+1):n,],y[(t*n+1):n],array)
t = 0.6
est_beta(X[1:n*t,],y[1:n*t],array)
est_beta(X[(t*n+1):n,],y[(t*n+1):n],array)
t = 0.6
est_beta(X[1:n*t,],y[1:n*t],array)
t = 0.9
est_beta(X[1:n*t,],y[1:n*t],array)
1:n*t
est_beta(X[1:(n*t),],y[1:(n*t)],array)
t = 0.9
est_beta(X[1:(n*t),],y[1:(n*t)],array)
t = 0.6
est_beta(X[1:(n*t),],y[1:(n*t)],array)
t = 0.5
est_beta(X[1:(n*t),],y[1:(n*t)],array)
Tn = est_Tn(x,y,covhat,array)
Tn
n = dim(x)[1]
set = 2:(n-2)
test = c()
t = k/n
betahat1 = est_beta(x[1:k,], y[1:k],array)
k=2
betahat1 = est_beta(x[1:k,], y[1:k],array)
betahat2 = est_beta(x[(k+1):n,],y[(k+1):n],array)
betahat1
betahat2
t = 0.6
est_beta(X[(t*n+1):n,],y[(t*n+1):n],array)
est_beta(X[(t*n+1):n,],y[(t*n+1):n],array)
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
est_beta(X[(t*n+1):n,],y[(t*n+1):n],array,((t*n+1):n))
(t*n+1):n)
(t*n+1):n
set = (t*n+1):n
n = dim(X)[1]
h = n^(-1/5)
n = 100
t0 = 0.6
x1 = rnorm(n,0,1)
x2 = rexp(n)
x = cbind(x1, x2)
X = cbind(rep(1,n),x)
epsilon = rnorm(n, 0, 1)
beta1 = as.matrix(c (0,1/sqrt(2),1/sqrt(2)))
beta2 = as.matrix(c(0,1/sqrt(2),-1/sqrt(2)))
y1 = 20*exp(X[1:(t0*n),]%*%beta1) +epsilon[1:(t0*n)]
y2 = 20*exp(X[(t0*n+1):n,]%*%beta2) +epsilon[(t0*n+1):n]
y = c(y1, y2)
covhat = est_cov(x,y)
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
covhat = est_cov(x,y)
t = 0.9
est_beta(x[1:n*t,],y[1:n*t])
est_beta(x[1:(n*t),],y[1:(n*t)])
est_beta(x[(t*n+1):n,],y[(t*n+1):n])
t = 0.6
est_beta(x[1:(n*t),],y[1:(n*t)])
est_beta(x[(t*n+1):n,],y[(t*n+1):n])
Tn = est_Tn(x,y,covhat)
setwd("E://Quality Control//wzf//code")
source("E://Quality Control//wzf//code//functions.r")
source("E://Quality Control//wzf//code//function2.r")
n = 100
t0 = 0.6
x1 = rnorm(n,0,1)
x2 = rexp(n)
x = cbind(x1, x2)
X = cbind(rep(1,n),x)
epsilon = rnorm(n, 0, 1)
beta1 = as.matrix(c (0,1/sqrt(2),1/sqrt(2)))
beta2 = as.matrix(c(0,1/sqrt(2),-1/sqrt(2)))
y1 = 20*exp(X[1:(t0*n),]%*%beta1) +epsilon[1:(t0*n)]
y2 = 20*exp(X[(t0*n+1):n,]%*%beta2) +epsilon[(t0*n+1):n]
y = c(y1, y2)
covhat = est_cov(x,y)
t = 0.6
est_beta(x[1:(n*t),],y[1:(n*t)])
est_beta(x[(t*n+1):n,],y[(t*n+1):n])
Tn = est_Tn(x,y,covhat)
print(Tn)
Tnstarset = c()
for(flag in 1:100){
order = sample(n)
xtmp = x[order,]
ytmp = y[order]
Tnstarset = c(Tnstarset, est_Tn(xtmp,ytmp,covhat))
}
hist(Tnstarset, 30)
Tnstarset
Tnstarset[Tnstarset>200]
Tnstarset[Tnstarset<200]
hist(Tnstarset[Tnstarset<200],20)
hist(Tnstarset[Tnstarset<60],20)
Tn
quantile(Tnstarset)
quantile(Tnstarset,95)
quantile(Tnstarset,0.95)
quantile(Tnstarset,0.9)
quantile(Tnstarset,0.8)
