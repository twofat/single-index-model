require(MASS)

  generate = function(n,p,rho){
    sigma = matrix(,p,p)
    for(i in 1:p){
      for(j in 1:p){
        sigma[i,j] = rho^(abs(i-j))
      }
    }
    mvrnorm(n,rep(0,p),sigma)
  }
 
  matsqrt = function(x){
    eig = eigen(x)
    temp = diag(sqrt(eig$value))
    result = eig$vector %*% temp %*% t(eig$vector)
    return(result)
  }
  dmultinorm = function(x, mean, cov){
    k = length(mean)
    if(k>1){
      C = 1/sqrt((2*pi)^k*abs(det(cov)))
    }
    else{
      C = 1/sqrt((2*pi)^k*abs(cov))
    }
    v = as.matrix( x - mean )
    invcov = solve(cov)
    tmp1 = exp(-0.5* t(v) %*% invcov %*% v)
    print(tmp1)
    tmp2 = invcov %*% v
    print(tmp2)
    return(C*tmp1)
  }
  
  der_dmultinorm = function(x, mean, cov){
    k = length(mean)
    if(k>1){
      C = -1/sqrt((2*pi)^k*abs(det(cov)))
    }
    else{
      C = -1/sqrt((2*pi)^k*abs(cov))
    }
    v = as.matrix( x - mean )
    invcov = solve(cov)
    tmp1 = drop(exp(-0.5* t(v) %*% invcov %*% v))
    tmp2 = invcov %*% v
    return(C*tmp1*tmp2)
  }
der_K = function(x){
  temp = der_dmultinorm(x, rep(0,length(x)), diag(length(x)))
  return(temp)
}

rest_beta = function(X, y){
  n = dim(X)[1]
  h = sd(X)*n^(-1/6)
  q = dim(X)[2]
  C = -2/n/(n-1)/(h^(q+1))
  Xy = cbind(X,y)
  sum = c()
  for(i in 1:n){
    if(i==n){
      break
    }
    tmp = apply(matrix(Xy[(i+1):n,],,q+1),1,
                function(x){
                  der_K((X[i,]-x[1:q])/h)*(y[i]-x[q+1])
                })
    sum = rbind(sum, t(tmp))
  }
  if(n==1){
    sum = 0
  }
  else{
    sum = apply(sum, 2, sum)
  }
  beta = sum * C
  return(beta)
}

est_cov = function(X, y){
  n = dim(X)[1]
  h = sd(X)*n^(-1/6)
  q = dim(X)[2]
  C = 1/(n-1)/(h^(q+1))
  Xy = cbind(X,y)
  rmat = matrix(0,q,q)
  for(i in 1:n){
    tmp = apply(matrix(Xy[-i,],,q+1),1,
                function(x){
                  der_K((X[i,]-x[1:q])/h)*(y[i]-x[q+1])
                })
    rtmp = as.matrix(apply(t(tmp),2,sum)*C)
    rmat = rmat + rtmp %*% t(rtmp) / n
  }
  beta = as.matrix(est_beta(X, y))
  cov = rmat - beta %*% t(beta)
  return(cov)
	}

est_Tn = function(x,y,covhat,){
  n = dim(x)[1]
  set = 2:(n-2)
  test = c()
  for(k in set){
    t = k/n
    betahat1 = est_beta(x[1:k,], y[1:k])
    betahat2 = est_beta(x[(k+1):n,],y[(k+1):n])
    temp = as.matrix(betahat1 - betahat2)
    Q = sqrt(n)*t*(1-t)*solve(matsqrt(covhat))%*%temp
    test = c(test, sum(Q^2))
  }
  Tn = max(test)
  return(Tn)
}







